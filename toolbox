#!/usr/bin/env bash

set -euo pipefail

PROJECT_NAME="${FUZZRAKE_DEV_PROJECT_NAME:-fuzzrake}"
IMPORT_DIR_PATH='var/iuFormData/' # Trailing slash required

DB_PATH='var/db.sqlite'
DB_TMP_PATH="$DB_PATH.tmp"
DB_DUMP_DIR_PATH='db_dump'
DB_DUMP_PRV_COPY_PATH="$DB_DUMP_DIR_PATH/artisans_private_data-$(date -u '+%Y-%m-%d_%H-%M-%S').sql"

# Volatile information, easily reproducible
DB_IGNORED_TABLES=(artisans_commissions_statuses artisans_volatile_data artisans_urls_states tracker_settings submissions)

function run_command() {
    echo "Executing: $*"

    "$@"
}

function run_docker_compose() {
    run_command docker compose --project-directory docker --project-name "$PROJECT_NAME" "$@"
}

function run_docker_compose_exec() {
    run_docker_compose exec --user "$(echo -n "$(id -u):$(id -g)")" -ti php "$@"
}

function run_composer() {
    run_docker_compose_exec composer "$@"
}

function run_console() {
    run_docker_compose_exec ./bin/console "$@"
}

function assure_line_in_file() {
    local filepath="$1"
    local pattern="$2"
    local default="$3"

    grep -q "$pattern" "$filepath" || {
        echo "Appending '$default' to '$filepath'"
        echo "$default" >> "$filepath"
    }
}

function action_run_setup() {
    assure_line_in_file ./.env.local      '^GOOGLE_RECAPTCHA_SITE_KEY=' 'GOOGLE_RECAPTCHA_SITE_KEY=__TODO_PROVIDE_THIS__'
    assure_line_in_file ./.env.local      '^GOOGLE_RECAPTCHA_SECRET='   'GOOGLE_RECAPTCHA_SECRET=__TODO_PROVIDE_THIS__'

    assure_line_in_file ./.env.test.local '^GOOGLE_RECAPTCHA_SITE_KEY=' 'GOOGLE_RECAPTCHA_SITE_KEY=__TODO_PROVIDE_THIS__'
    assure_line_in_file ./.env.test.local '^GOOGLE_RECAPTCHA_SECRET='   'GOOGLE_RECAPTCHA_SECRET=__TODO_PROVIDE_THIS__'
}

function backup_private_data() {
    run_command sqlite3 "$DB_PATH" ".output $DB_DUMP_PRV_COPY_PATH" '.dump artisans_private_data'
}

function action_release_prod() {
    run_command git checkout main
    run_command git merge --no-edit develop
    run_command git push
    run_command git checkout develop
    run_command git merge main
    run_command git push
    run_command ansible/setup_envs.yaml --limit prod_env
}

function action_release_beta() {
    run_command git branch -D beta
    run_command git checkout -b beta
    run_command git push --force origin beta
    run_command ansible/setup_envs.yaml --limit beta_env

    echo 'Make sure to return to the previous branch' # FIXME: This stupid limitation
}

function action_get_snapshots() {
    run_command rsync --recursive --progress --human-readable --compress --checksum \
        getfursu.it:/var/www/prod/var/snapshots/ var/snapshots/
}

function action_get_submissions() {
    . .env.local
    run_command rsync --recursive --progress --human-readable --compress --checksum \
        getfursu.it:/var/www/prod/var/iuFormData/ "$IMPORT_DIR_PATH"
    run_command aws s3 sync --size-only "${S3_COPIES_BUCKET_URL%/}/" "$IMPORT_DIR_PATH"
}

function action_dbcommit() {
    pushd "$DB_DUMP_DIR_PATH"

    run_command git reset HEAD
    run_command git commit -m 'Updated DB dump' -p
    run_command git push
    run_command git show -q

    popd
}

function action_dbpull() {
    run_command scp -p "getfursu.it:/var/www/prod/$DB_PATH" "$DB_TMP_PATH"
    backup_private_data
    run_command sqlite3 "$DB_TMP_PATH" 'DROP TABLE artisans_private_data;'
    run_command sqlite3 "$DB_TMP_PATH" ".read $DB_DUMP_PRV_COPY_PATH"
    run_command chmod a+w "$DB_TMP_PATH"
    run_command mv "$DB_TMP_PATH" "$DB_PATH"
}

function action_dbpush() {
    run_command cp "$DB_PATH" "$DB_TMP_PATH"
    run_command sqlite3 "$DB_TMP_PATH" "UPDATE artisans_private_data SET original_contact_info = '', contact_address = '';"
    run_command scp -p "$DB_TMP_PATH" "getfursu.it:/var/www/prod/$DB_PATH"
    run_command scp -p "$DB_TMP_PATH" "getfursu.it:/var/www/beta/$DB_PATH"
    run_command rm "$DB_TMP_PATH"
}

function action_dbdump() {
    # shellcheck disable=SC2207 # Yes, split by whitespace
    TABLE_NAMES=($(sqlite3 "$DB_PATH" .tables))

    for TABLE_NAME in "${DB_IGNORED_TABLES[@]}"; do # Sanity check
        if ! printf '%s\0' "${DB_IGNORED_TABLES[@]}" | grep -Fxqz -- "$TABLE_NAME"; then
            error "$TABLE_NAME does not exist in the DB $DB_PATH"
        fi
    done

    backup_private_data

    for TABLE_NAME in "${TABLE_NAMES[@]}"; do
        if ! printf '%s\0' "${DB_IGNORED_TABLES[@]}" | grep -Fxqz -- "$TABLE_NAME"; then
            run_command sqlite3 "$DB_PATH" ".output $DB_DUMP_DIR_PATH/$TABLE_NAME.sql" ".dump $TABLE_NAME"

            echo 'Dumping to JSON...'

            if grep 'CREATE TABLE' "$DB_DUMP_DIR_PATH/$TABLE_NAME.sql" | grep -q 'artisan_id'; then
                order_by='artisan_id'
            else
                order_by='id'
            fi

            sqlite3 -json "$DB_PATH" "SELECT * FROM $TABLE_NAME ORDER BY $order_by" | jq > "$DB_DUMP_DIR_PATH/$TABLE_NAME.json"
        fi
    done
}

function action_cloc() {
    local exclude_list
    exclude_list="$(cat <<- EXCLUDE
		assets/3rd-party
		src/Kernel.php
		tests/test_data
		tests/bootstrap.php
		tests/console-application.php
		tests/object-manager.php
		EXCLUDE
    )"

    echo '>>> INCLUDING TESTS'
    cloc --exclude-list-file=<(echo "$exclude_list") assets src templates tests \
        --counted=cloc-files-including-tests.nocommit.txt "$@"

    echo '>>> WITHOUT TESTS'
    cloc --exclude-list-file=<(echo "$exclude_list") assets src templates \
        --counted=cloc-files-without-tests.nocommit.txt "$@"
}

function error() {
    local message="$1"

    echo "ERROR: $message" >&2
    echo ''
    usage
    exit 1
}

function usage() {
    cat << EOF
Usage:
    $0 ACTION [arguments ...]

Available actions:

    setup        setup and/or fix required filesystem items and/or settings

    docker-up    "ups" the Docker Compose project
    docker-down  "downs" the Docker Compose project

    yep          execute 'yarn encore production'

    composer     run Composer

    console      run Symfony console command

    cc           clear cache

    pu           run PHPUnit tests
    pus          run PHPUnit tests, "small" group
    pum          run PHPUnit tests, "medium" group
    pul          run PHPUnit tests, "large" group

    pcf          run PHP CS Fixer
    ps           run PHPStan
    rector       run Rector
    el           run eslint

    cloc         run Cloc
EOF
}

function action() {
    [[ $# -ge 1 ]] || error 'Not enough arguments'

    local action="$1"
    shift

    case $action in
        'setup')        action_run_setup ;;
        'docker-up')    run_docker_compose up --detach --build ;;
        'docker-down')  run_docker_compose down ;;

        'yep')          yarn encore production ;;

        'composer')     run_composer "$@" ;;

        'console')      run_console "$@" ;;

        'cc')           run_command run_console cache:clear ;;
        'cc-beta')      run_command ssh getfursu.it docker exec fuzzrake-beta bin/console cache:clear ;;
        'cc-prod')      run_command ssh getfursu.it docker exec fuzzrake-prod bin/console cache:clear ;;

        'pu')           run_docker_compose_exec ./bin/phpunit --testdox "$@" ;;
        'pus')          action pu --group small  "$@" ;;
        'pum')          action pu --group medium "$@" ;;
        'pul')          action pu --group large  "$@" ;;

        'pcf')          run_docker_compose_exec ./vendor/bin/php-cs-fixer fix "$@" ;;
        'ps')           run_docker_compose_exec ./vendor/bin/phpstan analyse -c phpstan.neon "$@" ;;
        'rector')       run_docker_compose_exec ./vendor/bin/rector process "$@" ;;
        'el')           run_command yarn eslint assets/scripts/ --ext js,ts,vue "$@" ;;

        'cst')          run_console app:status-tracker:run "$@" ;;
        'cstc')         action cst --commit "$@" ;;
        'cstr')         action cst --refetch "$@" ;;
        'cstc-prod')    run_command ssh getfursu.it docker exec fuzzrake-prod bin/console app:status-tracker:run --commit ;;

        'tidy')         run_console app:data:tidy "$@" ;;
        'tidyc')        action tidy --commit "$@" ;;

        'dbcommit')     action_dbcommit ;;
        'dbpull')       action_dbpull ;;
        'dbpush')       action_dbpush ;;
        'dbdump')       action_dbdump ;;

        'release-beta') action_release_beta ;;
        'release-prod') action_release_prod ;;

        'get-snapshots')   action_get_snapshots ;;
        'get-submissions') action_get_submissions ;;

        'cloc')         action_cloc "$@" ;;

        *) error "Unknown action: '$action'" ;;
    esac
}

pushd "$(dirname "$(realpath "$0")")"

action "$@"
