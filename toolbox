#!/usr/bin/env bash

set -euo pipefail

PROJECT_NAME="${FUZZRAKE_DEV_PROJECT_NAME:-fuzzrake}"

SYMFONY_DIR_REL_PATH='symfony'
KOTLIN_DIR_REL_PATH='kotlin'
SNAPSHOTS_REL_PATH='symfony/var/snapshots' # grep-code-snapshots-dir-path
DATABASE_REL_PATH='symfony/var/db.sqlite' # grep-code-database-path
DB_DUMP_DIR_REL_PATH='db_dump'
DB_DUMP_COPY_DIR_REL_PATH="$DB_DUMP_DIR_REL_PATH/$(date -u '+%Y-%m-%d_%H-%M-%S')"

PROD_ENV_SSH_PATH='getfursu.it:/var/www/prod'
BETA_ENV_SSH_PATH='getfursu.it:/var/www/beta'

function run_command() {
    echo "Executing: $*"

    "$@"
}

function run_docker_compose() {
    run_command docker compose --project-directory docker --project-name "$PROJECT_NAME" "$@"
}

function run_docker_compose_exec() {
    run_docker_compose exec --user "$(echo -n "$(id -u):www-data")" --interactive --tty php "$@"
}

function run_composer() {
    run_docker_compose_exec composer "$@"
}

function run_console() {
    run_docker_compose_exec ./bin/console "$@"
}

function run_yarn() {
    # Known issue: paths in additional arguments will contain symfony/ prefix
    # Not using --cwd yarn switch because eslint ignored that
    # Known issue: requires local installation of Yarn
    pushd "$SYMFONY_DIR_REL_PATH"
    run_command yarn "$@"
    popd
}

function run_gradle() {
    run_command "$KOTLIN_DIR_REL_PATH/gradlew" -p "$KOTLIN_DIR_REL_PATH" "$@"
}

function action_release_prod() {
    run_command git checkout main
    run_command git merge --no-edit develop
    run_command git push
    run_command git checkout develop
    run_command git merge main
    run_command git push
    run_command ansible/setup_envs.yaml --limit prod_env
}

function action_release_beta() {
    PREVIOUS_BRANCH="$(git branch --show-current)"

    run_command git branch -D beta
    run_command git checkout -b beta
    run_command git push --force origin beta
    run_command ansible/setup_envs.yaml --limit beta_env --diff

    git checkout "$PREVIOUS_BRANCH"
}

function action_get_snapshots() {
    run_command rsync --recursive --progress --human-readable --compress --checksum \
        "$PROD_ENV_SSH_PATH/$SNAPSHOTS_REL_PATH/" "$SNAPSHOTS_REL_PATH"
}

function action_dbcommit() {
    pushd "$DB_DUMP_DIR_REL_PATH"

    run_command git reset HEAD
    run_command git commit -m 'Updated DB dump' -p
    run_command git push
    run_command git show -q

    popd
}

function action_dbpull() {
    run_command scp -p "$PROD_ENV_SSH_PATH/$DATABASE_REL_PATH" "$DATABASE_REL_PATH"
    run_command chmod a+w "$DATABASE_REL_PATH"
}

function action_dbpush() {
    echo "$(tput setaf 1)$(tput bold)WARNING!$(tput sgr0) Destructive action."
    read -rp 'Confirm by typing "overwrite": ' user_input

    if [[ $user_input != 'overwrite' ]]; then
        exit 1
    fi

    run_command scp -p "$DATABASE_REL_PATH" "$PROD_ENV_SSH_PATH/$DATABASE_REL_PATH"
    run_command scp -p "$DATABASE_REL_PATH" "$BETA_ENV_SSH_PATH/$DATABASE_REL_PATH"
}

function action_dbdump() {
    # shellcheck disable=SC2207 # Yes, split by whitespace
    TABLE_NAMES=($(sqlite3 "$DATABASE_REL_PATH" .tables))

    mkdir "$DB_DUMP_COPY_DIR_REL_PATH"

    for TABLE_NAME in "${TABLE_NAMES[@]}"; do
        local SQL_DUMP_PATH="$DB_DUMP_COPY_DIR_REL_PATH/$TABLE_NAME.sql"
        local JSON_DUMP_PATH="$DB_DUMP_COPY_DIR_REL_PATH/$TABLE_NAME.json"

        run_command sqlite3 "$DATABASE_REL_PATH" ".output $SQL_DUMP_PATH" ".dump $TABLE_NAME"

        echo 'Dumping to JSON...'

        if grep -q 'CREATE TABLE creators_urls (' "$SQL_DUMP_PATH"; then
            order_by='ORDER BY creator_id, type, url'
        elif grep -q 'CREATE TABLE creators_values (' "$SQL_DUMP_PATH"; then
            order_by='ORDER BY creator_id, field_name, value'
        elif grep -q 'CREATE TABLE doctrine_migration_versions (' "$SQL_DUMP_PATH"; then
            order_by=''
        else
            order_by='ORDER BY id'
        fi

        sqlite3 -json "$DATABASE_REL_PATH" "SELECT * FROM $TABLE_NAME $order_by" | jq > "$JSON_DUMP_PATH"
    done

    rm -f "$DB_DUMP_DIR_REL_PATH"/*.{json,sql}
    cp "$DB_DUMP_COPY_DIR_REL_PATH"/*.{json,sql} "$DB_DUMP_DIR_REL_PATH"
}

function error() {
    local message="$1"

    echo "ERROR: $message" >&2
    echo ''
    usage
    exit 1
}

function usage() {
    cat << EOF
Usage:
    $0 ACTION [arguments ...]

Available actions:

    branch       Symfony:
                     composer install
                     yarn install
                     yep

    docker-up    Symfony: "ups" the Docker Compose project
    docker-down  Symfony: "downs" the Docker Compose project

    composer     Symfony: run Composer
    yarn         Symfony: run Yarn (needs to be installed locally)

    yep          Symfony: execute 'yarn encore production'

    console      Symfony: run Symfony console command

    cc           Symfony: clear cache

    pu           Symfony: run PHPUnit tests
    pus          Symfony: run PHPUnit tests, "small" group
    pum          Symfony: run PHPUnit tests, "medium" group
    pul          Symfony: run PHPUnit tests, "large" group

    pcf          Symfony: run PHP CS Fixer
    tcf          Symfony: run Twig CS Fixer
    ps           Symfony: run PHPStan
    rector       Symfony: run Rector
    el           Symfony: run ESLint
    prettier     Symfony: run Prettier

    gradle       Kotlin: run Gradle command
    miniatures   Kotlin: set miniatures data for changed photos
EOF
}

function action() {
    [[ $# -ge 1 ]] || error 'Not enough arguments'

    local action="$1"
    shift

    case $action in
        'branch')
            action docker-up
            run_composer install
            run_yarn install
            run_yarn encore production
        ;;
        'docker-up')    run_docker_compose up --detach --build ;;
        'docker-down')  run_docker_compose down ;;

        'yep')          pushd "$SYMFONY_DIR_REL_PATH" ; yarn encore production ; popd ;;

        'composer')     run_composer "$@" ;;
        'yarn')         run_yarn "$@" ;;

        'console')      run_console "$@" ;;

        'cc')           run_console cache:clear && run_console app:precompute-data ;;
        'cc-beta')      run_command ssh getfursu.it \
            'docker exec fuzzrake-beta bin/console cache:clear && docker exec fuzzrake-beta bin/console app:precompute-data' ;;
        'cc-prod')      run_command ssh getfursu.it \
            'docker exec fuzzrake-prod bin/console cache:clear && docker exec fuzzrake-prod bin/console app:precompute-data' ;;

        'pu')           run_docker_compose_exec ./bin/phpunit "$@" ;;
        'pus')          action pu --group small  "$@" ;;
        'pum')          action pu --group medium "$@" ;;
        'pul')          action pu --group large  "$@" ;;

        'pcf')          run_docker_compose_exec ./vendor/bin/php-cs-fixer fix "$@" ;;
        'tcf')          run_docker_compose_exec ./vendor/bin/twig-cs-fixer lint --fix "$@" ;;
        'ps')           run_docker_compose_exec ./vendor/bin/phpstan analyse -c phpstan.neon "$@" ;;
        'rector')       run_docker_compose_exec ./vendor/bin/rector process "$@" ;;
        'el')           run_yarn eslint assets/scripts/ "$@" ;;
        'prettier')     run_yarn prettier . --write "$@" ;;

        'tidy')         run_console app:data:tidy "$@" ;;
        'tidyc')        action tidy --commit "$@" ;;

        'dbpull')       action_dbpull ;;
        'dbdump')       action_dbdump ;;
        'dbcommit')     action_dbcommit ;;
        'dbpdc')        action_dbpull && action_dbdump && action_dbcommit ;;
        'dbpush')       action_dbpush ;;

        'release-beta') action_release_beta ;;
        'release-prod') action_release_prod ;;

        'get-snapshots')   action_get_snapshots ;;

        'gradle')       run_gradle "$@" ;;
        'miniatures')   run_gradle run --args update-miniatures "$@" ;;

        # Ugly but hopefully truly temporary
        'data-prod') run_command ssh getfursu.it 'cd /opt/prod && fuzzrake-git-HEAD/bin/fuzzrake update-miniatures && echo DONE' ;;

        *) error "Unknown action: '$action'" ;;
    esac
}

pushd "$(dirname "$(realpath "$0")")"

action "$@"
