#!/usr/bin/env bash

set -euo pipefail

PROJECT_NAME="${FUZZRAKE_DEV_PROJECT_NAME:-fuzzrake}"

SYMFONY_DIR_REL_PATH='symfony'
SUBMISSIONS_DIR_REL_PATH='symfony/var/submissions' # grep-code-submissions-dir-path
SNAPSHOTS_REL_PATH='symfony/var/snapshots' # grep-code-snapshots-dir-path
DATABASE_REL_PATH='symfony/var/db.sqlite' # grep-code-database-path
TMP_DATABASE_REL_PATH="$DATABASE_REL_PATH.tmp"
DB_DUMP_DIR_REL_PATH='db_dump'
DB_DUMP_PRV_COPY_PATH="$DB_DUMP_DIR_REL_PATH/artisans_private_data-$(date -u '+%Y-%m-%d_%H-%M-%S').sql"

PROD_ENV_SSH_PATH='getfursu.it:/var/www/prod'
BETA_ENV_SSH_PATH='getfursu.it:/var/www/beta'

# Volatile information, easily reproducible
DB_IGNORED_TABLES=(artisans_commissions_statuses artisans_volatile_data artisans_urls_states submissions)

function run_command() {
    echo "Executing: $*"

    "$@"
}

function run_docker_compose() {
    run_command docker compose --project-directory docker --project-name "$PROJECT_NAME" "$@"
}

function run_docker_compose_exec() {
    run_docker_compose exec --user "$(echo -n "$(id -u):$(id -g)")" -ti php "$@"
}

function run_composer() {
    run_docker_compose_exec composer "$@"
}

function run_console() {
    run_docker_compose_exec ./bin/console "$@"
}

function run_yarn() {
    # Known issue: paths in additional arguments will contain symfony/ prefix
    # Not using --cwd yarn switch because eslint ignored that
    # Known issue: requires local installation of Yarn
    pushd "$SYMFONY_DIR_REL_PATH"
    run_command yarn "$@"
    popd
}

function assure_line_in_file() {
    local filepath="$1"
    local pattern="$2"
    local default="$3"

    grep -q "$pattern" "$filepath" || {
        echo "Appending '$default' to '$filepath'"
        echo "$default" >> "$filepath"
    }
}

function action_run_setup() {  # TODO: Ansible this
    assure_line_in_file "$SYMFONY_DIR_REL_PATH/.env.local"      '^GOOGLE_RECAPTCHA_SITE_KEY=' 'GOOGLE_RECAPTCHA_SITE_KEY=__TODO_PROVIDE_THIS__'
    assure_line_in_file "$SYMFONY_DIR_REL_PATH/.env.local"      '^GOOGLE_RECAPTCHA_SECRET='   'GOOGLE_RECAPTCHA_SECRET=__TODO_PROVIDE_THIS__'

    assure_line_in_file "$SYMFONY_DIR_REL_PATH/.env.test.local" '^GOOGLE_RECAPTCHA_SITE_KEY=' 'GOOGLE_RECAPTCHA_SITE_KEY=__TODO_PROVIDE_THIS__'
    assure_line_in_file "$SYMFONY_DIR_REL_PATH/.env.test.local" '^GOOGLE_RECAPTCHA_SECRET='   'GOOGLE_RECAPTCHA_SECRET=__TODO_PROVIDE_THIS__'
}

function backup_private_data() {
    run_command sqlite3 "$DATABASE_REL_PATH" ".output $DB_DUMP_PRV_COPY_PATH" '.dump artisans_private_data'
}

function action_release_prod() {
    run_command git checkout main
    run_command git merge --no-edit develop
    run_command git push
    run_command git checkout develop
    run_command git merge main
    run_command git push
    run_command ansible/setup_envs.yaml --limit prod_env
}

function action_release_beta() {
    PREVIOUS_BRANCH="$(git branch --show-current)"

    run_command git branch -D beta
    run_command git checkout -b beta
    run_command git push --force origin beta
    run_command ansible/setup_envs.yaml --limit beta_env --diff

    git checkout "$PREVIOUS_BRANCH"
}

function action_get_snapshots() {
    run_command rsync --recursive --progress --human-readable --compress --checksum \
        "$PROD_ENV_SSH_PATH/$SNAPSHOTS_REL_PATH/" "$SNAPSHOTS_REL_PATH"
}

function action_get_submissions() {
    run_command rsync --recursive --progress --human-readable --compress --checksum \
        "$PROD_ENV_SSH_PATH/$SUBMISSIONS_DIR_REL_PATH/" "$SUBMISSIONS_DIR_REL_PATH/"
}

function action_dbcommit() {
    pushd "$DB_DUMP_DIR_REL_PATH"

    run_command git reset HEAD
    run_command git commit -m 'Updated DB dump' -p
    run_command git push
    run_command git show -q

    popd
}

function action_dbpull() {
    run_command scp -p "$PROD_ENV_SSH_PATH/$DATABASE_REL_PATH" "$TMP_DATABASE_REL_PATH"
    backup_private_data
    run_command sqlite3   "$TMP_DATABASE_REL_PATH" 'DROP TABLE artisans_private_data;'
    run_command sqlite3   "$TMP_DATABASE_REL_PATH" ".read $DB_DUMP_PRV_COPY_PATH"
    run_command chmod a+w "$TMP_DATABASE_REL_PATH"
    run_command mv        "$TMP_DATABASE_REL_PATH" "$DATABASE_REL_PATH"
}

function action_dbpush() {
    run_command cp "$DATABASE_REL_PATH" "$TMP_DATABASE_REL_PATH"
    run_command sqlite3 "$TMP_DATABASE_REL_PATH" "UPDATE artisans_private_data SET original_contact_info = '', contact_address = '', notes = '';"
    run_command scp -p  "$TMP_DATABASE_REL_PATH" "$PROD_ENV_SSH_PATH/$DATABASE_REL_PATH"
    run_command scp -p  "$TMP_DATABASE_REL_PATH" "$BETA_ENV_SSH_PATH/$DATABASE_REL_PATH"
    run_command rm      "$TMP_DATABASE_REL_PATH"
}

function action_dbdump() {
    # shellcheck disable=SC2207 # Yes, split by whitespace
    TABLE_NAMES=($(sqlite3 "$DATABASE_REL_PATH" .tables))

    for TABLE_NAME in "${DB_IGNORED_TABLES[@]}"; do # Sanity check
        if ! printf '%s\0' "${DB_IGNORED_TABLES[@]}" | grep -Fxqz -- "$TABLE_NAME"; then
            error "$TABLE_NAME does not exist in the DB $DATABASE_REL_PATH"
        fi
    done

    backup_private_data

    for TABLE_NAME in "${TABLE_NAMES[@]}"; do
        if ! printf '%s\0' "${DB_IGNORED_TABLES[@]}" | grep -Fxqz -- "$TABLE_NAME"; then
            run_command sqlite3 "$DATABASE_REL_PATH" ".output $DB_DUMP_DIR_REL_PATH/$TABLE_NAME.sql" ".dump $TABLE_NAME"

            echo 'Dumping to JSON...'

            if grep 'CREATE TABLE' "$DB_DUMP_DIR_REL_PATH/$TABLE_NAME.sql" | grep -q 'artisan_id'; then
                order_by='artisan_id'
            else
                order_by='id'
            fi

            sqlite3 -json "$DATABASE_REL_PATH" "SELECT * FROM $TABLE_NAME ORDER BY $order_by" | jq > "$DB_DUMP_DIR_REL_PATH/$TABLE_NAME.json"
        fi
    done
}

function error() {
    local message="$1"

    echo "ERROR: $message" >&2
    echo ''
    usage
    exit 1
}

function usage() {
    cat << EOF
Usage:
    $0 ACTION [arguments ...]

Available actions:

    setup        Symfony: setup and/or fix required filesystem items and/or settings

    docker-up    Symfony: "ups" the Docker Compose project
    docker-down  Symfony: "downs" the Docker Compose project

    yep          Symfony: execute 'yarn encore production'

    composer     Symfony: run Composer
    yarn         Symfony: run Yarn (needs to be installed locally)

    console      Symfony: run Symfony console command

    cc           Symfony: clear cache

    pu           Symfony: run PHPUnit tests
    pus          Symfony: run PHPUnit tests, "small" group
    pum          Symfony: run PHPUnit tests, "medium" group
    pul          Symfony: run PHPUnit tests, "large" group

    pcf          Symfony: run PHP CS Fixer
    tcf          Symfony: run Twig CS Fixer
    ps           Symfony: run PHPStan
    rector       Symfony: run Rector
    el           Symfony: run ESLint
    prettier     Symfony: run Prettier
EOF
}

function action() {
    [[ $# -ge 1 ]] || error 'Not enough arguments'

    local action="$1"
    shift

    case $action in
        'setup')        action_run_setup ;;
        'docker-up')    run_docker_compose up --detach --build ;;
        'docker-down')  run_docker_compose down ;;

        'yep')          pushd symfony ; yarn encore production ; popd ;;

        'composer')     run_composer "$@" ;;
        'yarn')         run_yarn "$@" ;;

        'console')      run_console "$@" ;;

        'cc')           run_console cache:clear ;;
        'cc-beta')      run_command ssh getfursu.it docker exec fuzzrake-beta bin/console cache:clear ;;
        'cc-prod')      run_command ssh getfursu.it docker exec fuzzrake-prod bin/console cache:clear ;;

        'pu')           run_docker_compose_exec ./bin/phpunit --testdox "$@" ;;
        'pus')          action pu --group small  "$@" ;;
        'pum')          action pu --group medium "$@" ;;
        'pul')          action pu --group large  "$@" ;;

        'pcf')          run_docker_compose_exec ./vendor/bin/php-cs-fixer fix "$@" ;;
        'tcf')          run_docker_compose_exec ./vendor/bin/twig-cs-fixer lint --fix "$@" ;;
        'ps')           run_docker_compose_exec ./vendor/bin/phpstan analyse -c phpstan.neon "$@" ;;
        'rector')       run_docker_compose_exec ./vendor/bin/rector process "$@" ;;
        'el')           run_yarn eslint assets/scripts/ --ext js,ts,vue "$@" ;;
        'prettier')     run_yarn prettier . --write "$@" ;;

        'tidy')         run_console app:data:tidy "$@" ;;
        'tidyc')        action tidy --commit "$@" ;;

        'dbcommit')     action_dbcommit ;;
        'dbpull')       action_dbpull ;;
        'dbpush')       action_dbpush ;;
        'dbdump')       action_dbdump ;;

        'release-beta') action_release_beta ;;
        'release-prod') action_release_prod ;;

        'get-snapshots')   action_get_snapshots ;;
        'get-submissions') action_get_submissions ;;

        *) error "Unknown action: '$action'" ;;
    esac
}

pushd "$(dirname "$(realpath "$0")")"

action "$@"
